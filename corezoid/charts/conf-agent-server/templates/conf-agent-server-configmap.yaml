apiVersion: v1
data:
  conf_agent_server.config: |
    %% -*- mode: erlang;  -*-
    [

      {corezoid_sdk, [
        {host, "https://{{ .Values.global.subdomain }}.{{ .Values.global.domain }}"}
      ]},

      %% license client
        {corezoid_license_client, [
          {path_to_license, "/ebsmnt/certs/corezoid_license"}
      ]},

      {enigma, [
        {is_enabled, {{ .Values.global.enigma.enabled }}},
        {private_key_id, "{{ .Values.global.capi.enigma_pk_id }}"},
        {key_manager_host, "http://enigma-key-manager-service:8080"},
        {rotors_pool, [
          {min_size, 3},
          {max_size, 50},
          {start_size, 3}
        ]}
      ]},


      {conf_agent_server,
        [
            {port, 8585},                            % port for listen api requests (8585 by default)
            {encrypt_decrypt, []},                   % for enable encrypt rabbit msgs need set to {encrypt_decrypt, [queue]}

         {pgsql, [
          {{- if .Values.global.db.bouncer }}
           {host, "pgbouncer-service"},
          {{- else }}
           {host, "${POSTGRES_DBHOST}"},
          {{- end }}
           {user, "${POSTGRES_DBUSER}"},
           {dbname, "settings"},
           {password, "${POSTGRES_DBPWD}"},
           {min_size, 0},
           {max_size, 2},
           {start_size, 1}
         ]}
     ]},


      {ermql, [
        {disabled, false},

      {publish_request, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {queues_count, 1},
          {min_size, 1},
          {max_size, 1},
          {start_size, 1}
      ]},

      {consumer_response, [
                {servers, [
          {{- if eq .Values.global.mq.internal false }}
                      [
                        {host, "${MQ_HOST}"},
                        {port, ${MQ_PORT}},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- else }}
                      [
                        {host, "rabbit-service"},
                        {port, 5672},
                        {username, <<"${MQ_USERNAME}">>},
                        {password, <<"${MQ_PASSWORD}">>},
                        {vhost, <<"${MQ_VHOST}">>}
                    ]
          {{- end }}
                ]},
          {connections_per_queue, 1},
          {channels_per_connection, 1},
          {messages_prefetch_size_per_channel, 50}
      ]}

      ]},

      {lager, [
          %% What handlers to install with what arguments (wrapped by middleman)

          {log_root, "/ebsmnt/erlang/conf_agent_server/log"},

          {handlers, [
            {lager_console_backend, debug},
            {lager_file_backend, [{file, "error.log"}, {level, error}, {size, 50000000}, {date, "$D0"}, {count, 1}]},
            {lager_file_backend, [{file, "console.log"}, {level, info}, {size, 50000000}, {date, "$D0"}, {count, 1}]},
            {lager_file_backend, [{file, "debug.log"}, {level, debug}, {size, 50000000}, {date, "$D0"}, {count, 1}]}

          ]},

          %% What colors to use with what log levels
          {colored, true},
          {colors, [
            {debug,     "\e[0;38m" },
            {info,      "\e[1;37m" },
            {notice,    "\e[1;36m" },
            {warning,   "\e[1;33m" },
            {error,     "\e[1;31m" },
            {critical,  "\e[1;35m" },
            {alert,     "\e[1;44m" },
            {emergency, "\e[1;41m" }

          ]},

          %% Whether to write a crash log, and where. Undefined means no crash logger.
          {crash_log, "crash.log"},
          %% Maximum size in bytes of events in the crash log - defaults to 65536
          {crash_log_msg_size, 65536},
          %% Maximum size of the crash log in bytes, before its rotated, set
          %% to 0 to disable rotation - default is 0
          {crash_log_size, 734003200},
          %% What time to rotate the crash log - default is no time
          %% rotation. See the README for a description of this format.
          {crash_log_date, "$D0"},
          %% Number of rotated crash logs to keep, 0 means keep only the
          %% current one - default is 0
          {crash_log_count, 1},
          %% Whether to redirect error_logger messages into lager - defaults to true
          {error_logger_redirect, true},
          %% How many messages per second to allow from error_logger before we start dropping them
          {error_logger_hwm, 50},
          %% How big the gen_event mailbox can get before it is switched into sync mode
          {async_threshold, 20},
          %% Switch back to async mode, when gen_event mailbox size decrease from 'async_threshold'
          %% to async_threshold - async_threshold_window
          {async_threshold_window, 5}
        ]
      }


    ].

kind: ConfigMap
metadata:
  name: {{ .Values.appName }}-config
