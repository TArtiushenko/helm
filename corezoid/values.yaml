global:
  imageRegistry:
  imagePullSecrets: []
  pullPolicy: IfNotPresent
  storageClass: "gp3"
  domain: ""
  error_log_level: debug
  prometheusScrape: true
  namespaceCreate: true
prometheus:
  port: 9100
nameOverride:
fullnameOverride:
commonLabels: {}
commonAnnotations: {}
extraDeploy: []
schedulerName: ""
provisoner: ""
ingress:
  enabled: true
  hostname:
  annotations: {}
capi:
  name: capi
  subdomain: corezoid
  image:
    registry: ""
    repository: public/conveyor_api
    tag: "7.7.0.2"
    pullPolicy: IfNotPresent
    pullSecrets: []
  updateStrategy:
    type: RollingUpdate
  terminationGracePeriodSeconds: 10
  prometheusScrape: false
  replicaCount: 2
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 100Mi
  schedulers: 1
  customLivenessProbe: {}
  customReadinessProbe: {}
  command: []
  args: []
  hostAliases: []
  podLabels: {}
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  nodeSelector: {}
  tolerations: []
  priorityClassName: ""
  lifecycleHooks: {}
  extraEnvVars: []
  extraEnvVarsCM:
  extraEnvVarsSecret:
  extraVolumes: []
  extraVolumeMounts: []
  initContainers: {}
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPU: 65
    targetMemory: 1000Mi
    requests:
  service:
    capiPort: 80
    confAgentPort: 8585
  capi_front_captcha_disabled: true
  capi_front_captcha_key: ""
  capi_backend_captcha_key: ""
  registration_restriction:
    enable: false
    allowed_domains: []
    # - "gmail.com"
    # - "yahoo.com"
  max_task_size_for_process_conv: 264000
  max_task_size_for_st_diagramm_conv: 264000
  max_reqs_limit: 50000
  merchant_api:
    skip_otp: true
  cookie_expr_time: 7200
  front_setting:
    doc_host: "doc.corezoid.com"
    doc_index: "/"
    ui:
      market: false
      bot_platform: false
      billing: false
      git_call: false
      default_company: "My Corezoid"
      tab_name: "Corezoid"
      disabled_auth_logo: false
      color_main: "#0791e5"
      color_logo: "#0791e5"
      color_logo_hover: "#056cab"
  ldap_server: ""
  ldap_port: "389"
  ldap_base: ""
  ldap_filter: ""
  ldap_first_bind_user: true
  ldap_bind_user_name: ""
  ldap_bind_user_pass: ""
  ldap_user_nick_entry: ""
  ldap_tls: false
  logic_settings:
    api_max_thread: 50000
    sender_max_threads: 25
    timer_default: 5
  enigma_pk_id: ""
confAgentServer:
  name: conf-agent-server
  image:
    registry: docker-hub.middleware.biz
    repository: public/conf_agent_server
    tag: "1.5.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 2
  terminationGracePeriodSeconds: 10
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 100Mi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPU: 65
    targetMemory: 80
    requests:
  service:
    confAgenttPort: 8585
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
http:
  name: http-worker
  image:
    registry: docker-hub.middleware.biz
    repository: public/http-worker
    tag: "3.6.0.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 1
  terminationGracePeriodSeconds: 40
  resources:
    limits:
      cpu: 2
      memory: 2Gi
    requests:
      cpu: 100m
      memory: 100Mi
  autoscaling:
    enabled: true
    minReplicas: 1
    maxReplicas: 2
    targetCPU: 65
    targetMemory:
    requests:
  schedulers: 2
  max_http_resp_size: "5242880"
  blocked_domains: []
  # - "169.254.169.254"
  tune:
    http_consumer_queues_count: 8
    http_consumer_connections_per_queue: 1
    http_consumer_channels_per_connection: 1
    http_consumer_messages_prefetch_size_per_channel: 20
    consumer_settings_messages_prefetch_size_per_channel: 50
    consumer_response_prefetch_size_per_channel: 50
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
syncapi:
  name: "syncapi"
  subdomain: "syncapi"
  image:
    registry: docker-hub.middleware.biz
    repository: public/corezoid_api_sync
    tag: "2.1.0"
    pullSecrets: []
  replicaCount: 1
  autoscaling:
    enabled: false
  service:
    syncapiPort: 80
  schedulers: 2
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
webadm:
  name: webadm
  image:
    registry: docker-hub.middleware.biz
    repository: public/conveyor_adm_web
    tag: "5.7.0"
    pullSecrets: []
  replicaCount: 2
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 50m
      memory: 50Mi
  autoscaling:
    enabled: false
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
  service:
    port: 80
websuperadm:
  name: "web-superadm"
  subdomain: "superadm"
  image:
    registry: docker-hub.middleware.biz
    repository: public/conf_agent_admin
    tag: "1.5.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 2
  resources:
    limits:
      cpu: 200m
      memory: 500Mi
    requests:
      cpu: 50m
      memory: 50Mi
  autoscaling:
    enabled: false
  service:
    port: 80
worker:
  name: worker
  image:
    registry: docker-hub.middleware.biz
    repository: public/conveyor-worker
    tag: "4.7.0.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  replicaCount: 2
  resources:
    limits:
      cpu: 1000m
      memory: 1500Mi
    requests:
      cpu: 150m
      memory: 150Mi
  autoscaling:
    enabled: false
  schedulers: 2
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
merchant:
  name: merchant
  image:
    registry: docker-hub.middleware.biz
    repository: public/merchant
    tag: "v0.0.27.2"
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 500m
      memory: 800Mi
    requests:
      cpu: 100m
      memory: 100Mi
  autoscaling:
    enabled: false
  service:
    merchantPort: 80
    managmentPort: 7980
  merchant_login: ""
  merchant_secret: ""
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
limits:
  name: limits
  image:
    registry: docker-hub.middleware.biz
    repository: public/corezoid_limits
    tag: "1.2.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 500m
      memory: 800Mi
    requests:
      cpu: 50m
      memory: 50Mi
  service:
    limitsPort: 80
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
mult:
  name: mult
  image:
    registry: docker-hub.middleware.biz
    repository: public/conveyor_api_multipart
    tag: "2.6.0.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 500m
      memory: 800Mi
    requests:
      cpu: 50m
      memory: 50Mi
  autoscaling:
    enabled: false
  service:
    multPort: 80
  persistantVolumeClaimName: "mult-pvc"
  persistantVolumeClaimCreate: true
  enigma_pk_id: ""
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
usercode:
  name: usercode
  image:
    registry: docker-hub.middleware.biz
    repository: public/usercode
    tag: "7.2.1"
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 1000m
      memory: 1000Mi
    requests:
      cpu: 50m
      memory: 50Mi
  autoscaling:
    enabled: false
  enigma_pk_id: ""
  podAnnotations: {}
  podAffinityPreset: ""
  podAntiAffinityPreset: soft
  nodeAffinityPreset:
    type: ""
    key: ""
    values: []
  affinity: {}
sa:
  enabled: false
  google_client_id: 8888
sa_web:
  subdomain: "sa"
gitcall:
  enabled: false
  mq_vhost: "/gitcall"
  dunder_mq_vhost: "/dundergitcall"
enigma:
  enabled: false
  encryption: false
store_dumps:
  enable: true
externalRedis:
  host: ''
  port: ""
  password: ''
  existingSecret: ''
  existingSecretPasswordKey: 'redis-password'
externalRabbitmq:
  host: ""
  port: 5672
  username: ""
  password: ""
  vhost: ""
externalElasticsearch:
  host: ""
  port: 9200
  password: ""
externalPostgresql:
  postgresqlHost: "postgresql.cluster.local"
  postgresqlPostgresUsername: "postgres"
  postgresqlPostgresPassword: ""
  postgresqlUsername: ""
  postgresqlPassword: ""
  postgresqlPort: 5432
  postgresqlMaxConnections: 1000
  postgresqlPostgresConnectionLimit: 1000
  postgresqlDbUserConnectionLimit: 1000
  shards_count: 10
  shards: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]
  maxclientconn: "100000"
  default_pool_size: "5000"
  default_pool_mode: transaction
  postgres_schema:
    version: "5.7.0"
  rotation:
    enabled: true
    schedule: "0 0 1 * *"
